# Nginx Load Balancer Configuration for URL Shortener

# Define upstream servers (app instances)
upstream url_shortener_backend {
    # Load balancing method: least_conn for better distribution
    least_conn;
    
    # App instances - these will be created by docker-compose
    server app1:8000 max_fails=3 fail_timeout=30s weight=1;
    server app2:8000 max_fails=3 fail_timeout=30s weight=1;
    server app3:8000 max_fails=3 fail_timeout=30s weight=1;
    
    # Backup server (optional) - only used when all primary servers are down
    # server app4:8000 backup;
    
    # Health check settings
    # Nginx will mark server as down after 3 failed attempts
    # Server will be retried after 30 seconds
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=redirect_limit:10m rate=50r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=5r/m;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Main server block
server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    
    # Enable gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # Real IP configuration (for proper rate limiting and logging)
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;
    set_real_ip_from 10.0.0.0/8;
    set_real_ip_from 172.16.0.0/12;
    set_real_ip_from 192.168.0.0/16;

    # Connection limits
    limit_conn conn_limit 50;

    # Health check endpoint (nginx level)
    location /nginx-health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Load balancer status page
    location /nginx-status {
        # Allow only internal access
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        deny all;
        
        access_log off;
        return 200 "Load Balancer Status: Active\nUpstream: url_shortener_backend\n";
        add_header Content-Type text/plain;
    }

    # API routes with stricter rate limiting
    location ~ ^/api/(users|urls) {
        # Rate limiting for API endpoints
        limit_req zone=api_limit burst=20 nodelay;
        
        # Proxy settings
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffer settings
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        
        # Health check for backend
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
    }

    # Authentication endpoints with very strict rate limiting
    location ~ ^/api/users/(login|register|forgot-password) {
        # Very strict rate limiting for auth endpoints
        limit_req zone=auth_limit burst=3 nodelay;
        
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Health check - proxy to backend
    location /health {
        access_log off;
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 3s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }

    # Short URL redirects (most performance critical)
    location ~ ^/[a-zA-Z0-9]{4,10}$ {
        # Moderate rate limiting for redirects
        limit_req zone=redirect_limit burst=100 nodelay;
        
        # Cache static redirects for better performance
        proxy_cache_valid 200 302 1m;
        proxy_cache_valid 404 10s;
        
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Very fast timeouts for redirects
        proxy_connect_timeout 2s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        
        # Follow redirects
        proxy_redirect off;
    }

    # Default location (catch all)
    location / {
        limit_req zone=api_limit burst=10 nodelay;
        
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Static files (if any) - serve directly from nginx
    location /static/ {
        expires 7d;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # Serve from app if exists
        try_files $uri @backend;
    }

    # Fallback to backend for static files
    location @backend {
        proxy_pass http://url_shortener_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(env|log|config)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Custom error pages
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    error_page 404 /404.html;
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }

    # Custom access and error logs with detailed format
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log detailed;
    error_log /var/log/nginx/error.log warn;
}

# HTTP/2 and SSL configuration (for production)
# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
#     
#     ssl_certificate /path/to/certificate.crt;
#     ssl_certificate_key /path/to/private.key;
#     
#     # SSL optimization
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     
#     # Rest of the configuration same as HTTP server
#     # ... (copy all location blocks from above)
# }
